/**
 * New node file
 */

var objInputFile = {};
var objOutputFile = {};

function parseErrorFfmpeg(strOutput){
	reg = new RegExp(/Unrecognized option.*/gm);
	objOption = strOutput.match(reg);
	if (objOption != null){
		throw new Error(objOption[0]);
	}
	
	reg = new RegExp(/Invalid.*/gm);
	objError = strOutput.match(reg);
	if (objError != null){
		throw new Error(objError[0]);
	}
	
	reg = new RegExp(/Error.*/gm);
	objError = strOutput.match(reg);
	if (objError != null){
		throw new Error(objError[0]);
	}
}

function getVideoInformation(strVideoPath) {
	objFileData = {};
	objFileData.path = strVideoPath;

	strVideoInfoCli = "/opt/local/bin/ffmpeg -i " + strVideoPath;
	strOutput = Common.execCli(strVideoInfoCli, true);
	
	strMessage = '';

	// Get video info : width & height
	regexp = new RegExp(/\s*Video\s*:[^,]+,[^,]+,\s*(\d+)x(\d+)(.*)/gm);
	objVideoData = regexp.exec(strOutput);
	if (objVideoData != null) {
		objFileData.width = parseInt(objVideoData[1]);
		objFileData.height = parseInt(objVideoData[2]);
		strMessage += ' - Resolution : ' + objFileData.width + 'x'
				+ objFileData.height;
	}
	// Get audio informations
	regexp = new RegExp(/\s*Stream[^:]+:\s*Audio\s*:(?:.*?)(\d+)\s*Hz.*/gm);
	objStreamData = regexp.exec(strOutput);
	if (objStreamData != null) {
	}

	// Get video duration
	regexp = new RegExp(/\s*Duration:\s*(\d{2}):(\d{2}):(\d{2})\.(\d{1,2})/gm);
	objDurationData = regexp.exec(strOutput);
	if (objDurationData != null) {
		objFileData.duration = ((parseInt(objDurationData[1]) * 60 + parseInt(objDurationData[2])) * 60 + parseInt(objDurationData[3]));
		strMessage += ' - Duration : ' + objFileData.duration;
	}

	// Get bit rate
	regexp = new RegExp(/\s*bitrate:\s*(\d+) kb\/s/gm);
	objBitrateData = regexp.exec(strOutput);
	if (objBitrateData != null) {
		objFileData.bitrate = parseInt(objBitrateData[1]);
		strMessage += ' - Bitrate : ' + objFileData.bitrate;
	}
	
	Common.log('Video informations ' + strVideoPath + ':' + strMessage);

	return objFileData;
}

function loadParameters(objParams) {
	strCliParams = '';
	for ( var strParam in objParams) {
		strCliParams += ' -' + strParam + ' ' + objParams[strParam];
	}
	return strCliParams;
}

function run(strInputFile, strOutputFile) {
	objInputFile.path = strInputFile;
	objOutputFile.path = strOutputFile;
	
	objInputFile = getVideoInformation(objInputFile.path);

	strEncodingCli = "/opt/local/bin/ffmpeg -y -i " + objInputFile.path
			+ strCliParams + ' ' + objOutputFile.path;

	Common.log('Encoding processing ' + strEncodingCli);
	
	var fs = require('fs');
	if (fs.existsSync(objOutputFile.path) == false){
		strOutput = Common.execCli(strEncodingCli, true);
		parseErrorFfmpeg(strOutput);
		
		objOutputFile = getVideoInformation(objOutputFile.path);
		/*
		if (objOutputFile.duration != objInputFile.duration) {
			throw new Error('Difference between input and output duration');
		}
		*/
	}
}

module.exports = {
	loadParameters : loadParameters,
	run : run
};
